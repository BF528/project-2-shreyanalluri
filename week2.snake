import pandas as pd

sample_csv = pd.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
    input:
        expand('results/project_2_chipseq/{condition}_{rep}.bam', condition=CONDITIONS, rep=REPS),
        expand('results/project_2_chipseq/{condition}_{rep}_sorted.bam', condition=CONDITIONS, rep=REPS),
        expand('results/project_2_chipseq/{condition}_{rep}_sorted.bam.bai', condition=CONDITIONS, rep=REPS),
        expand('results/project_2_chipseq/{condition}_{rep}_flagstats.txt', condition=CONDITIONS, rep=REPS),
        'results/project_2_chipseq/multiqc_report.html',
        expand('results/project_2_chipseq/{condition}_{rep}_bamcoverage.bigWig', condition=CONDITIONS, rep=REPS),
        'results/project_2_chipseq/results.npz',
        'results/project_2_chipseq/chipseq_heatmap.png'
rule bowtie2_align:
    input: 
        fastq = 'results/project_2_chipseq/{condition}_{rep}.trimmed.fastq.gz',
        index_files = expand('results/project_2_chipseq/GRCh38_index.{ext}', ext=['1.bt2', '2.bt2', '3.bt2', '4.bt2', 'rev.1.bt2', 'rev.2.bt2'])
    output:
        bam_file = 'results/project_2_chipseq/{condition}_{rep}.bam'
    threads: 16
    params:
        index_basename = 'results/project_2_chipseq/GRCh38_index'
    conda:
        'envs/bowtie2_env.yml'
    shell:
        '''
        bowtie2 -x {params.index_basename} -U {input.fastq}|samtools view -bS - > {output.bam_file}
        '''

rule samtools_sort:
	input:
		bam_file = 'results/project_2_chipseq/{condition}_{rep}.bam'
	output:
		sorted_bam = 'results/project_2_chipseq/{condition}_{rep}_sorted.bam'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools sort {input.bam_file} -o {output.sorted_bam}
		'''

rule samtools_idx:
	input:
		sorted_bam = 'results/project_2_chipseq/{condition}_{rep}_sorted.bam'
	output:
		index_bam = 'results/project_2_chipseq/{condition}_{rep}_sorted.bam.bai'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools index {input.sorted_bam}
		'''
rule samtools_flagstats:
    input:
        sorted_bam = 'results/project_2_chipseq/{condition}_{rep}_sorted.bam'
    output:
        flagstats = 'results/project_2_chipseq/{condition}_{rep}_flagstats.txt'
    conda:
        'envs/samtools_env.yml'
    shell:
        '''
        samtools flagstats {input.sorted_bam} > {output.flagstats}
        '''
rule multiqc:
	input:
		flagstats = expand('results/project_2_chipseq/{condition}_{rep}_flagstats.txt', condition=CONDITIONS, rep=REPS)
	output:
		qc_report = 'results/project_2_chipseq/multiqc_report.html'
	params:
		outdir = 'results/project_2_chipseq/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc {params.outdir} -o {params.outdir}
		'''
rule bamCoverage:
	input:
		sorted_bam = 'results/project_2_chipseq/{condition}_{rep}_sorted.bam'
	output:
		sorted_bigwig = 'results/project_2_chipseq/{condition}_{rep}_bamcoverage.bigWig'
	threads: 4
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		bamCoverage --threads {threads} -b {input.sorted_bam} -o {output.sorted_bigwig}
		'''

rule multiBwSummary:
	input:
		sorted_bigwig = expand('results/project_2_chipseq/{condition}_{rep}_bamcoverage.bigWig', condition=CONDITIONS, rep=REPS),
	output:
		bigwig_summary = 'results/project_2_chipseq/results.npz'
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		multiBigwigSummary bins -b {input.sorted_bigwig} -o {output.bigwig_summary}
		'''

rule plotCorrelation:
	input:
		bigwig_summary = 'results/project_2_chipseq/results.npz'
	output:
		plot = 'results/project_2_chipseq/chipseq_heatmap.png'
	params:
	conda:
		'envs/deeptools_env.yml'
	shell:
		'''
		plotCorrelation -in {input.bigwig_summary} -c pearson -p heatmap -o {output.plot}
		'''