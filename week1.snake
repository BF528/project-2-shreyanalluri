import pandas as pd

sample_csv = pd.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
    input:
        'samples/{condition}_{rep}.fastq.gz'
        expand('results/project_2_chipseq/{condition}_{rep}_fastqc.html', condition=CONDITIONS, rep=REPS),
        expand('results/{condition}_{rep}.trimmed.fastq.gz', condition=CONDITIONS, rep=REPS),
        expand('results/project_2_chipseq/chr21_reference.{ext}', ext=['1.bt2', '2.bt2', '3.bt2', '4.bt2', 'rev.1.bt2', 'rev.2.bt2'])

rule wget_files:
    output:
        'samples/{condition}_{rep}.fastq.gz'
    params:
        link = lambda wildcards: sample_csv.loc['{}_{}'.format(wildcards.condition, wildcards.rep), 'ftp_link'],
        renamed = lambda wildcards: 'samples/{}_{}.fastq.gz'.format(wildcards.condition, wildcards.rep)
    shell:
        '''
        wget -O {params.renamed} {params.link} 
        '''

rule bowtie2_build_gencode:
    input:
        reference = 'results/project_2_chipseq/GRCh38.chr21.fa.gz'
    output:
        expand('results/project_2_chipseq/chr21_reference.{ext}', ext=['1.bt2', '2.bt2', '3.bt2', '4.bt2', 'rev.1.bt2', 'rev.2.bt2'])
    params:
        basename = "results/project_2_chipseq/chr21_reference"
    threads: 16
    conda:
        'envs/bowtie2_env.yml'
    shell:
        """
        bowtie2-build --threads {threads} {input.reference} {params.basename}
        """


rule fastqc:
    input:
        fastq = 'samples/{condition}_{rep}.fastq.gz'
    output:
        fastqc = 'results/project_2_chipseq/{condition}_{rep}_fastqc.html'
    params:
        outdir = 'results/project_2_chipseq'
    threads: 4
    conda:
        'envs/fastqc_env.yml'
    shell:
        '''
        fastqc --threads {threads} {input.fastq} -o {params.outdir} 
        '''

rule trimmomatic:
    input:
        fastqc = 'results/project_2_chipseq/{condition}_{rep}_fastqc.html', ### tell snakemake to run this rule after fastqc is finished
        fastq = 'samples/{condition}_{rep}.fastq.gz',
        adapters = 'results/project_2_chipseq/TruSeq3-SE.fa'
    output:
        trimmed_fastq = 'results/{condition}_{rep}.trimmed.fastq.gz'
    params:
        threads = 8
    conda:
        'envs/trimmomatic_env.yml'
    shell:
        """
        trimmomatic SE -threads {params.threads} {input.fastq} {output.trimmed_fastq} \
        ILLUMINACLIP:{input.adapters}:2:30:10 \
        LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15
        """

