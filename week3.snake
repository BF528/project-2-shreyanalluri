import pandas as pd

sample_csv = pd.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		#expand('results/project_2_chipseq/tag_{condition}_{rep}', condition = CONDITIONS, rep = REPS),
		#expand('results/project_2_chipseq/RUNX1_{rep}_peaks.bed', rep = REPS)
		#'results/project_2_chipseq/reproducible_peaks.bed'
		#'results/project_2_chipseq/filtered_reproducible_peaks.bed'
		'results/project_2_chipseq/annotated_peaks.txt',
		'results/project_2_chipseq/motifs'
		
		

rule make_tag_dir:
	input: 
		bam_file = 'results/project_2_chipseq/{condition}_{rep}.bam'
	output:
		tag_dir = directory("results/project_2_chipseq/tag_{condition}_{rep}")
	params:
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		makeTagDirectory {output.tag_dir} {input.bam_file}
		'''

rule findPeaks:
	input:
		control_dir = 'results/project_2_chipseq/tag_INP_{rep}',
		exp_dir = 'results/project_2_chipseq/tag_RUNX1_{rep}'
	output:
		peaks = 'results/project_2_chipseq/RUNX1_{rep}_peaks.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findPeaks {input.exp_dir} -style factor -nfr -i {input.control_dir} -o {output.peaks}
		'''

rule convertPeakFiles:
	input:
		peaks = 'results/project_2_chipseq/RUNX1_{rep}_peaks.txt'
	output:
		bed_peak = 'results/project_2_chipseq/RUNX1_{rep}_peaks.bed'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		pos2bed.pl {input.peaks} > {output.bed_peak}
		'''

rule intersect_peaks:
	input:
		rep1 = 'results/project_2_chipseq/RUNX1_rep1_peaks.bed',
		rep2 = 'results/project_2_chipseq/RUNX1_rep2_peaks.bed'
	output:
		intersection = 'results/project_2_chipseq/reproducible_peaks.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.rep1} -b {input.rep2} -f 0.90 -r -wa -wb > {output.intersection}
		'''

rule filter_blacklist:
	input:
		blacklist = 'results/hg38-blacklist.v2.bed',
		repro_peaks = 'results/project_2_chipseq/reproducible_peaks.bed'
	output:
		filtered_peaks = 'results/project_2_chipseq/filtered_reproducible_peaks.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.repro_peaks} -b {input.blacklist} -v > {output.filtered_peaks}
		'''

rule unzip_gtf:
	input:
		gz = 'results/project_2_chipseq/gencode.v45.primary_assembly.annotation.gtf.gz'
	output:
		gtf = 'results/project_2_chipseq/gencode.v45.primary_assembly.annotation.gtf'
	shell:
		'''
		gunzip -c {input.gz} > {output.gtf}
		'''

rule annotate_peaks:
	input:
		repro_peaks = 'results/project_2_chipseq/filtered_reproducible_peaks.bed',
		gtf = 'results/project_2_chipseq/gencode.v45.primary_assembly.annotation.gtf'
	output:
		annot_peaks = 'results/project_2_chipseq/annotated_peaks.txt'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		annotatepeaks.pl {input.repro_peaks} hg38 -gtf {input.gtf} > {output.annot_peaks}
		'''

rule unzip_genome:
	input:
		hg38fa_gz = 'results/project_2_chipseq/GRCh38.primary_assembly.genome.fa.gz'
	output:
		hg38fa = 'project-2-shreyanalluri/results/project_2_chipseq/GRCh38.primary_assembly.genome.fa'
	shell:
		'''
		gunzip -c {input.hg38fa_gz} > {output.hg38fa}
		'''

rule motifs:
	input:
		repro_peaks = 'results/project_2_chipseq/filtered_reproducible_peaks.bed',
		hg38fa = 'project-2-shreyanalluri/results/project_2_chipseq/GRCh38.primary_assembly.genome.fa'
	output:
		motif_dir = directory('results/project_2_chipseq/motifs')
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		findMotifsGenome.pl {input.repro_peaks} {input.hg38fa} {output.motif_dir}/ -size 200 -mask
		'''
